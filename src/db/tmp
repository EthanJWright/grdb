#include "graph.h"
#include "cli.h"
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>


void
set_file_desc(component_t c, vertexid_t v1){
  // Read in the vertecies from file system
  char s[BUFSIZE];
  /* Set the value of a vertex tuple */
  struct vertex v;
  vertex_init(&v);
  v.id = v1;

  /* Open the vertex file */
  memset(s, 0, BUFSIZE);
  sprintf(s, "%s/%d/%d/v", grdbdir, gno, cno);
  c->vfd = open(s, O_RDWR | O_CREAT, 0644);
  if (c->vfd < 0) {
      printf("Open vertex file failed\n");
      return;
  }
  printf("fd is: %i\n",c->vfd);
}

attribute_t 
find_int_attr(attribute_t a){
  for(attribute_t attribute = a; attribute != NULL; attribute = attribute->next){
    if(attribute->bt == 4){
      return attribute;
    }
  }
  return NULL;
}

int 
num_vert(component_t c){
  ssize_t size;
  // check for schema
  if(c->sv == NULL){
    size = 0;
  }else{
    size = schema_size(c->sv);
  }

  // Read ids from vertex file
  int unit_size = sizeof(vertexid_t) + size;
  char *buffer = malloc(unit_size);
  off_t offset;
  int file = c->vfd;
  printf("Num vert fd is: %i\n",file);
  int count = 0;

  for(offset = 0;; offset += unit_size){
    ssize_t amount_read = lseek(file, offset, unit_size);
    if(amount_read <= 0){
      break;
    }else{
      count += 1;
    }
  }
  free(buffer);
  return count;
}




/* get number of vertices in component c */
int
get_vertices_total(component_t c){
    ssize_t size, len;
    char* buf;
    off_t off;
    int readlen, count;
    
    if (c->sv == NULL)
        size = 0;
    else
        size = schema_size(c->sv);
    
    readlen = sizeof(vertexid_t) + size;
    printf("size is: %zu\n", size);
    buf = malloc(readlen); 
    count = 0;
    for (off = 0;; off += readlen) {
        lseek(c->vfd, off, SEEK_SET);
        len = read(c->vfd, buf, readlen);
        if (len <= 0)
            break;
        (count) ++;
    }
    free(buf);
    return count;
}

void
get_vert(component_t c, vertexid_t *vertecies){
  ssize_t size;
  // check for schema
  if(c->sv == NULL){
    size = 0;
  }else{
    size = schema_size(c->sv);
  }

  // Read ids from vertex file
  int unit_size = sizeof(vertexid_t) + size;
  char *buffer = malloc(unit_size);
  off_t offset;
  int file = c->vfd;

  for(int i = 0, offset = 0;; i++, offset += unit_size){
    lseek(file, offset, SEEK_SET);
    ssize_t len = read(file, buffer, unit_size);
    if(len == -1 || len == 0){
       break;
    }
  }
}

int
component_sssp(
        component_t c,
        vertexid_t v1,
        vertexid_t v2,
        int *n,
        int *total_weight,
        vertexid_t **path)
{
  /* Set Vertex File Desc */
  set_file_desc(c, v1);

  /* Get total vert */
  int total = get_vertices_total(c);
  printf("TOTAL IS : %i\n",total);

  vertexid_t *vertices;
  vertices = malloc(total * sizeof(vertexid_t));


     /*
	 * Figure out which attribute in the component edges schema you will
	 * use for your weight function
	 */

  attribute_t result = find_int_attr(c->se->attrlist);
  char* attr_name = result->name;
  printf("%s\n",attr_name);

	/*
	 * Execute Dijkstra on the attribute you found for the specified
	 * component
	 */



	/* Change this as needed */
	return (-1);
}


